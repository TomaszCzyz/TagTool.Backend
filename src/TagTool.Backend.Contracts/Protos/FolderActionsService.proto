syntax = "proto3";

import "Protos/DomainTypes.proto";

option csharp_namespace = "TagTool.Backend";

package TagToolBackend;

service FolderActionsService {
  // This bi-directional call allows to check correctness of a new folder name as it is changing.
  rpc CanRenameFolder (stream CanRenameFolderRequest) returns (stream CanRenameFolderReply);
  // Renames a given folder.
  rpc RenameFolder (RenameFolderRequest) returns (RenameFolderReply);
  // Moves a folder to specified location.
  rpc MoveFolder (MoveFolderRequest) returns (MoveFolderReply);
  // Deletes a specified folder and its content.
  rpc DeleteFolder (DeleteFolderRequest) returns (DeleteFolderReply);
  // Add given tag to children of a folder.
  rpc TagChildren (TagChildrenRequest) returns (TagChildrenReply);
  // Removes given tag from children of a folder.
  rpc UntagChildren (UntagChildrenRequest) returns (UntagChildrenReply);
}

// The single request checks if given folder name can be used.  
message CanRenameFolderRequest {
  // The item to rename.
  string fullName = 1;
  // The new filename to check.
  string newFolderName = 2;
}

// The reply indicating if folder can be renamed
message CanRenameFolderReply {
  // The result that contains error in case of operation failure, None otherwise.
  oneof result {
    // The error describing the reason of a failure.
    Error error = 1;
  }
}

// The request to rename a given folder
message RenameFolderRequest {
  // The item to rename.
  string fullName = 1;
  // New filename.
  string newFolderName = 2;
}

// The result indicating if rename operation was successful.
message RenameFolderReply {
  oneof result {
    // New location of a moved folder.
    string newFullName = 1;
    // The error message.
    string errorMessage = 2;
  };
}

// The request to move folder to a new location.
message MoveFolderRequest {
  // The file to move. 
  string fullName = 1;
  // The destination path.
  string destination = 2;
}

// The reply indicating if move operation was successful. 
message MoveFolderReply {
  oneof result {
    // New location of a moved folder.
    string newLocation = 1;
    // The error message.
    string errorMessage = 2;
  };
}

// The request to delete a folder. 
message DeleteFolderRequest {
  // The folder to be deleted.
  Item item = 1;
  // The flag indicating whether a folder should be recoverable.
  bool recycle = 2;
}

// The replying indicating if folder deletion was successful.
message DeleteFolderReply {
  oneof result {
    // The location from where folder was deleted.
    string deletedFolderFullName = 1;
    // The error message.
    string errorMessage = 2;
  };
}

// The request to tag children of a given folder with a given tag.
message TagChildrenRequest {
  // The name of a tag.
  string tagName = 1;
  // The full path to root folder.
  string fullName = 2;
  // The recurse depth, defaults to int.MaxValue
  int32 depth = 3;
  // The flag indicating if only files should be tagged and folder omitted. 
  bool tagOnlyFiles = 4;
}

// The reply indicating success or fail of tagging children of a folder.
message TagChildrenReply {
  oneof result {
    // The success message.
    string successMessage = 1;
    // The error message.
    string errorMessage = 2;
  };
}

// The request to untag children of a given folder.
message UntagChildrenRequest {
  // The name of a tag.
  string tagName = 1;
  // The full path to root folder.
  string fullName = 2;
  // The recurse depth, defaults to int.MaxValue
  int32 depth = 3;
  // The flag indicating if only files should be tagged and folder omitted. 
  bool tagOnlyFiles = 4;
}

// The reply indicating success or fail of untagging children of a folder.
message UntagChildrenReply {
  oneof result {
    // The success message.
    string successMessage = 1;
    // The error message.
    string errorMessage = 2;
  };
}
