syntax = "proto3";

import "google/protobuf/any.proto";
import "Protos/DomainTypes.proto";

option csharp_namespace = "TagTool.Backend";

package TagToolBackend;

service TagService {
  // Creates a new Tag. If tag cannot be created returns error message.
  rpc CreateTag (CreateTagRequest) returns (CreateTagReply);
  // Checks if tag with given name can be created.
  rpc CanCreateTag(stream CanCreateTagRequest) returns (stream CanCreateTagReply);
  // Deletes a Tag if tag exists and is unused, otherwise return error message.
  // Used tags can be deleted be setting 'deleteUsedToo' flag .
  rpc DeleteTag (DeleteTagRequest) returns (DeleteTagReply);
  // Updates a tag
  //  rpc UpdateTag(UpdateTagRequest) returns (UpdateTagReply);

  // Get tag synonyms groups with every base tag in hierarchy, e.g. (Cat, Pussy) -> Animal, Creature
  rpc GetAllTagsAssociations (GetAllTagsAssociationsRequest) returns (stream GetAllTagsAssociationsReply);
  // Add new synonym, which describes additional relation between tags.
  rpc AddSynonym (AddSynonymRequest) returns (AddSynonymReply);
  // Removes synonym.
  rpc RemoveSynonym (RemoveSynonymRequest) returns (RemoveSynonymReply);
  // Adds a child-parent relation between synonyms groups.
  rpc AddChild (AddChildRequest) returns (AddChildReply);
  // Removes a relation between synonyms groups.
  rpc RemoveChild (RemoveChildRequest) returns (RemoveChildReply);

  // Tags an item.
  rpc TagItem(TagItemRequest) returns (TagItemReply);
  // Untags an item if one exists.
  rpc UntagItem(UntagItemRequest) returns (UntagItemReply);

  // Gets an info about an item if one exists.
  rpc GetItem(GetItemRequest) returns (GetItemReply);
  // Gets items which tags are meet the request conditions.
  rpc GetItemsByTags(GetItemsByTagsRequest) returns (GetItemsByTagsReply);

  // Checks if given items exists in tagged items database. 
  // The purpose of this endpoint is to avoid transfer and allocation Item information just to check existence.  
  rpc DoesItemExists(DoesItemExistsRequest) returns (DoesItemExistsReply);
  // Checks if given Tags already exists.
  rpc DoesTagExists(DoesTagExistsRequest) returns (DoesTagExistsReply);

  // Searches existing tags for matches or partial matches.
  rpc SearchTags(SearchTagsRequest) returns (stream SearchTagsReply);

  // Reverts effects of the last command, such as CreateTag, TagItem, e.t.c.
  rpc Undo(UndoRequest) returns (UndoReply);
  // Repeats command reverted by Undo endpoint.
  rpc Redo(RedoRequest) returns (RedoReply);

  // Sets convention of tag names. The convention is applied when tag is created 
  // and tag name is stored in given format.
  rpc SetTagNamingConvention(SetTagNamingConventionRequest) returns (SetTagNamingConventionReply);

  rpc ExecuteLinkedAction(ExecuteLinkedActionRequest) returns (ExecuteLinkedActionReply);

  rpc AddOrUpdateJob(AddOrUpdateJobRequest) returns (AddOrUpdateJobReply);

  rpc GetAvailableJobs(GetAvailableJobsRequest) returns (GetAvailableJobsReply);
  rpc GetRunningTasks(GetRunningTasksRequest) returns (stream GetRunningTasksReply);
}

// The request to create a new tag.
message CreateTagRequest {
  // The tag.
  google.protobuf.Any tag = 2;
}

// The reply indicating whether tag creation was successful or not.
message CreateTagReply {
  oneof result {
    // The newly created Tag's name.
    string createdTagName = 1;
    // The Error message.
    string errorMessage = 2;
  };
}

// The request to check if a tag with a given name can be created.
message CanCreateTagRequest {
  // The name of a new tag.
  string tagName = 1;
}

// The reply indicating whether requested tag name is valid and can be created.
message CanCreateTagReply {
  // The result that contains error when given name is already taken or reserved.
  // 'None' response for valid name.
  oneof result {
    // The error with description why given name cannot be used.
    Error error = 1;
  }
}

// The request to delete a tag.
message DeleteTagRequest {
  // The tag to be deleted.
  google.protobuf.Any tag = 1;
  // The flag that allows to delete tag that is associated with an item(s).
  // All items will be untagged from the given tag.
  bool deleteUsedToo = 2;
}

// The reply indicating whether tag deletion was successful or not.
message DeleteTagReply {
  oneof result {
    // The deleted Tag's name.
    string deletedTagName = 1;
    // The Error message in case of a failure.
    string errorMessage = 2;
  };
}

message GetAllTagsAssociationsRequest {
  // If None will be provided, then all associations will be returned.
  oneof singleTag {
    google.protobuf.Any tag = 1;
  }
}

message GetAllTagsAssociationsReply {
  // The name of group described in the current message.
  string groupName = 1;
  // The group of synonyms (equivalent tags).
  repeated google.protobuf.Any tagsInGroup = 2;
  // All parent groups.
  repeated string parentGroupNames = 3;
}

message AddSynonymRequest {
  google.protobuf.Any tag = 1;
  string groupName = 2;
}

message AddSynonymReply {
  oneof result {
    string successMessage = 1;
    Error error = 2;
  }
}

message RemoveSynonymRequest {
  google.protobuf.Any tag = 1;
  string groupName = 2;
}

message RemoveSynonymReply {
  oneof result {
    string successMessage = 1;
    Error error = 2;
  }
}

message AddChildRequest {
  google.protobuf.Any childTag = 1;
  google.protobuf.Any parentTag = 2;
}

message AddChildReply {
  oneof result {
    string successMessage = 1;
    Error error = 2;
  }
}

message RemoveChildRequest {
  google.protobuf.Any childTag = 1;
  google.protobuf.Any parentTag = 2;
}

message RemoveChildReply {
  oneof result {
    string successMessage = 1;
    Error error = 2;
  }
}

// The request to tag a given item.
message TagItemRequest {
  // The Tag to be added to the item.
  google.protobuf.Any tag = 1;
  // The Item to tag.
  oneof item {
    FileDto file = 2;
    FolderDto folder = 3;
  };
}

// The reply indicating whether tagging was successful or not.
message TagItemReply {
  oneof result {
    // The item with all its tags.
    TaggedItem taggedItem = 1;
    // The Error message in case of a failure.
    string errorMessage = 2;
  };
}

// The request to untag a given item.
message UntagItemRequest {
  // The Tag to be removed from the item.
  google.protobuf.Any tag = 1;
  // The item to untag
  oneof item {
    FileDto file = 2;
    FolderDto folder = 3;
  };
}

// The reply indicating whether untagging was successful or not.
message UntagItemReply {
  oneof result {
    // The item with all its tags.
    TaggedItem taggedItem = 1;
    // The Error message in case of a failure.
    string errorMessage = 2;
  }
}

// The request to get information about an specified Item
message GetItemRequest {
  // The item for which we want to retrieve information.
  oneof item {
    FileDto file = 2;
    FolderDto folder = 3;
  };
}

// The reply with information about an item or error message 
message GetItemReply {
  oneof result {
    // The item associated tags.
    TaggedItem taggedItem = 1;
    // The Error message in case of a failure.
    string errorMessage = 2;
  }
}

// The request to retrieve all tags that meet tags conditions,
// e.g. include tag 'Tag1' and exclude 'Tag2'.
message GetItemsByTagsRequest {
  repeated TagQueryParam queryParams = 1;
}

// Defines single segment of a tag search query.
message TagQueryParam {
  // The segment's state.
  QuerySegmentState state = 1;
  // The tag, e.g. normal, date range, size range, e.t.c.
  google.protobuf.Any tag = 2;

  enum QuerySegmentState {
    // The option indicating that results of search should not contain the tag.
    Exclude = 0;
    // The option indicating that searched item can contain given tag.
    Include = 1;
    // The option indicating that all returned items must contain given tag.
    MustBePresent = 2;
  }
}

// The reply containing tagged items than met query conditions.
message GetItemsByTagsReply {
  repeated TaggedItem taggedItems = 1;
}

// The request to check if given Item exists.
message DoesItemExistsRequest {
  // The item to check.
  oneof item {
    FileDto file = 1;
    FolderDto folder = 2;
  };
}

// The reply indicating if item exists.
message DoesItemExistsReply {
  // True, if Item exists; false if not.
  bool exists = 1;
}

// The request to check if given Tag exists.
message DoesTagExistsRequest {
  // The tag.
  google.protobuf.Any tag = 1;
}

// The reply indicating if given tag exists.
message DoesTagExistsReply {
  oneof result {
    // The tag.
    google.protobuf.Any tag = 1;
  }
}

// The request to find tags, which match or partially match 'searchText'.
// The most relevant matches are at the beginning of the reply.
message SearchTagsRequest {
  // The name or partial name of the searched Tag 
  string searchText = 1;
  // The limit of returned tag names.
  int32 resultsLimit = 2;
  // The type of search to be used.
  SearchType searchType = 3;
  // Search types.
  enum SearchType {
    StartsWith = 0;
    Fuzzy = 1;
    Wildcard = 2;
  }
}

// Stream of the replies containing Tag's names and information about matching type.  
message SearchTagsReply {
  // The tag.
  google.protobuf.Any tag = 1;
  // The flag indicating if request name fully matched found Tag.
  bool isExactMatch = 2;
  // The information about partial match. Set only when 'isExactMatch' flag is false. 
  repeated MatchedPart matchedPart = 3;

  // The component representing substring.
  message MatchedPart {
    // The start index.
    int32 startIndex = 1;
    // The length of a substring.
    int32 length = 2;
  }
}

// The request to undo last action.
message UndoRequest {}

// The reply indicating if undo operation was successful.
message UndoReply {
  oneof result {
    // The command's response message.
    string undoCommand = 1;
    // The error message, when undo operation failed. 
    string errorMessage = 2;
  }
}

// The request to redo last action.
message RedoRequest {}

// The reply indicating if redo operation was successful.
message RedoReply {
  oneof result {
    // The command's response message.
    string redoCommand = 1;
    // The error message, when redo operation failed.
    string errorMessage = 2;
  }
}

// The common naming conventions for sentences without spaces.
enum NamingConvention {
  None = 0;
  CamelCase = 1;
  PascalCase = 2;
  KebabCase = 3;
  SnakeCase = 4;
}

// Sets naming convention of tags in application.
message SetTagNamingConventionRequest {
  // New naming convention to apply.
  NamingConvention convention = 1;
  // When true, then change will be applied to existing tags.
  bool applyToExisting = 2;
}

// The reply indicating whether change was successful.
message SetTagNamingConventionReply {
  // The result indicating opening was successful.
  // None if operation was successful. 
  oneof result {
    Error error = 1;
  }
}

message ExecuteLinkedActionRequest {
  oneof item {
    FileDto file = 1;
    FolderDto folder = 2;
  };
}

message ExecuteLinkedActionReply {
  oneof result {
    Error error = 1;
  }
}

message AddOrUpdateJobRequest {
  string taskId = 1;
  repeated TagQueryParam queryParams = 2;
  string jobId = 3;
  Attributes jobAttributes = 4;
  repeated TriggerInfo triggers = 5;
}

message TriggerInfo {
  TriggerType type = 1;
  string arg = 2;
}

enum TriggerType {
  Manual = 0;
  Cron = 1;
  Event = 2;
}

message Attributes {
  map<string, string> values = 1;
}

message AddOrUpdateJobReply {
}

message GetAvailableJobsRequest {}

message GetAvailableJobsReply {
  repeated JobInfo infos = 1;
}

message JobInfo {
  string id = 1;
  string description = 2;
  Attributes attributesDescriptions = 3;
  repeated google.protobuf.Any applicableToItemTypes = 4;
}

message GetRunningTasksRequest {}

message GetRunningTasksReply {
  string taskId = 1;
  repeated TagQueryParam queryParams = 2;
  string jobId = 3;
  Attributes jobAttributes = 4;
  repeated TriggerInfo triggers = 5;
}
