syntax = "proto3";

import "google/protobuf/any.proto";
import "Protos/DomainTypes.proto";

option csharp_namespace = "TagTool.Backend";

package TagToolBackend;

service TagService {
  // Creates a new Tag. If tag cannot be created returns error message.
  rpc CreateTag (CreateTagRequest) returns (CreateTagReply);
  // Deletes a Tag if tag exists and is unused, otherwise return error message.
  // Used tags can be deleted be setting 'deleteUsedToo' flag .
  rpc DeleteTag (DeleteTagRequest) returns (DeleteTagReply);

  // Tags an item.
  rpc TagItem(TagItemRequest) returns (TagItemReply);
  // Untags an item if one exists.
  rpc UntagItem(UntagItemRequest) returns (UntagItemReply);

  // Gets an info about an item if one exists.
  rpc GetItem(GetItemRequest) returns (GetItemReply);
  // Gets items which are tagged with one or more of supplied tags.
  rpc GetItemsByTags(GetItemsByTagsRequest) returns (GetItemsByTagsReply);

  // Checks if given items exists in tagged items database. 
  // The purpose of this endpoint is to avoid transfer and allocation Item information just to check existence.  
  rpc DoesItemExists(DoesItemExistsRequest) returns (DoesItemExistsReply);
  // Checks if given Tags already exists.
  rpc DoesTagExists(DoesTagExistsRequest) returns (DoesTagExistsReply);

  // Searches existing tags for matches or partial matches.
  rpc SearchTags(SearchTagsRequest) returns (stream SearchTagsReply);

  // Reverts effects of the last command, such as CreateTag, TagItem, e.t.c.
  rpc Undo(UndoRequest) returns (UndoReply);
  // Repeats command reverted by Undo endpoint.
  rpc Redo(RedoRequest) returns (RedoReply);

  // Sets convention of tag names. The convention is applied when tag is created 
  // and tag name is stored in given format.
  rpc SetTagNamingConvention(SetTagNamingConventionRequest) returns (SetTagNamingConventionReply);
}

// The request to create a new tag.
message CreateTagRequest {
  // The tag.
  google.protobuf.Any tag = 2;
}

// The reply indicating whether tag creation was successful or not.
message CreateTagReply {
  oneof result {
    // The newly created Tag's name.
    string createdTagName = 1;
    // The Error message.
    string errorMessage = 2;
  };
}

// The request to delete a tag.
message DeleteTagRequest {
  // The name of a tag to delete.
  string TagName = 1;
  // The flag that allows to delete tag that is associated with an item(s).
  // All items will be untagged from the given tag.
  bool deleteUsedToo = 2;
}

// The reply indicating whether tag deletion was successful or not .
message DeleteTagReply {
  oneof result {
    // The deleted Tag's name.
    string deletedTagName = 1;
    // The Error message in case of a failure.
    string errorMessage = 2;
  };
}

// The request to tag a given item.
message TagItemRequest {
  // The Tag to be added to the item.
  google.protobuf.Any tag = 1;
  // The Item to tag.
  Item item = 2;
}

// The reply indicating whether tagging was successful or not.
message TagItemReply {
  oneof result {
    // The item with all its tags.
    TaggedItem taggedItem = 1;
    // The Error message in case of a failure.
    string errorMessage = 2;
  };
}

// The request to untag a given item.
message UntagItemRequest {
  // The Tag to be removed from the item.
  google.protobuf.Any tag = 1;
  // The item to untag
  Item item = 2;
}

// The reply indicating whether untagging was successful or not.
message UntagItemReply {
  oneof result {
    // The item with all its tags.
    TaggedItem taggedItem = 1;
    // The Error message in case of a failure.
    string errorMessage = 2;
  }
}

// The request to get information about an specified Item
message GetItemRequest {
  // The item for which we want to retrieve information.
  Item item = 1;
}

// The reply with information about an item or error message 
message GetItemReply {
  oneof result {
    // The item associated tags.
    TaggedItem taggedItem = 1;
    // The Error message in case of a failure.
    string errorMessage = 2;
  }
}

// The request to retrieve all tags that are tagged with given tags.
message GetItemsByTagsRequest {
  // The tag's names
  repeated string tagNames = 1;
}

// The reply containing an item with associated tags.
message GetItemsByTagsReply {
  repeated TaggedItem taggedItem = 1;
}

// The request to check if given Item exists.
message DoesItemExistsRequest {
  // The item to check.
  Item item = 1;
}

// The reply indicating if item exists.
message DoesItemExistsReply {
  // True, if Item exists; false if not.
  bool exists = 1;
}

// The request to check if given Tag exists.
message DoesTagExistsRequest {
  // The Tag's name
  string tagName = 1;
}

// The reply indicating if given tag exists.
message DoesTagExistsReply {
  // The Tag's name.
  bool exists = 1;
}

// The request to find tags, which match or partially match 'name'.
// The most relevant matches are at the beginning of the reply.
message SearchTagsRequest {
  // The name or partial name of the searched Tag 
  string name = 1;
  // The limit of returned tag names.
  int32 resultsLimit = 2;
  // The flag allowing to force searching only exact matches.
  SearchType searchType = 3;
  // The type of search to be used
  enum SearchType {
    StartsWith = 0;
    Partial = 1;
    Wildcard = 2;
  }
}

// Stream of the replies containing Tag's names and information about matching type.  
message SearchTagsReply {
  // The Tag's name. 
  string tagName = 1;
  // The flag indicating if request name fully matched found Tag.
  bool isExactMatch = 2;
  // The information about partial match. Set only when 'isExactMatch' flag is false. 
  repeated MatchedPart matchedPart = 3;

  // The component representing substring.
  message MatchedPart {
    // The start index.
    int32 startIndex = 1;
    // The length of a substring.
    int32 length = 2;
  }
}

message UndoRequest {}

message UndoReply {
  oneof result {
    string undoCommand = 1;
    string errorMessage = 2;
  }
}

message RedoRequest {}

message RedoReply {
  oneof result {
    string redoCommand = 1;
    string errorMessage = 2;
  }
}

enum NamingConvention {
  None = 0;
  CamelCase = 1;
  PascalCase = 2;
  KebabCase = 3;
  SnakeCase = 4;
}

// Sets naming convention of tags in application.
message SetTagNamingConventionRequest {
  // New naming convention to apply.
  NamingConvention convention = 1;
  // When true, then change will be applied to existing tags.
  bool applyToExisting = 2;
}

// The reply indicating whether change was successful.
message SetTagNamingConventionReply {
  // The result indicating opening was successful.
  // None if operation was successful. 
  oneof result {
    Error error = 1;
  }
}
